# Generated by Django 5.0 on 2024-07-27 02:20

from django.db import migrations
import json

EMPTY_DICT = {'type': 'text', 'text': '\n'}

def type_paragraph(paragraph, new_body : list, prefix = ''):
    content = paragraph.get('content')
    if content is None:
        new_body.append(EMPTY_DICT)
        return new_body
    temp_text = ""
    for text in content:
        if text['type'] == 'text':
            temp_text += str(text['text'])
    if prefix == '':
        new_dict = {'type': 'text', 'text': temp_text}
    else:
        new_dict = {'type': 'text', 'text': prefix + ' ' + temp_text}
    new_body.append(new_dict)
    return new_body

def type_heading(heading, new_body : list):
    content = heading.get('content')
    if content is None:
        new_body.append(EMPTY_DICT)
        return new_body
    temp_text = ""
    for text in content:
        if text['type'] == 'text':
            temp_text += str(text['text'])
    new_dict = {'type': 'text', 'text': temp_text}
    new_body.append(new_dict)
    return new_body

def type_bullet_list(bullet_list, new_body : list, prefix = ''):
    content = bullet_list.get('content')
    if content is None:
        new_body.append(EMPTY_DICT)
        return new_body
    for item in content:
        if item['type'] == 'listItem':
            _content = item.get('content')
            if _content is None:
                new_body.append(EMPTY_DICT)
                continue
            for page in _content:
                if page['type'] == 'paragraph':
                    new_body = type_paragraph(page, new_body, prefix + '- ')
                elif page['type'] == 'bulletList':
                    new_body = type_bullet_list(page, new_body, prefix + '  ')
                elif page['type'] == 'orderedList':
                    new_body = type_ordered_list(page, new_body, prefix + '  ')
    return new_body

def type_ordered_list(ordered_list, new_body : list, prefix = ''):
    content = ordered_list.get('content')
    attr = ordered_list.get('attrs')
    start = int(attr['start'])
    if content is None:
        new_body.append(EMPTY_DICT)
        return new_body
    for item in content:
        if item['type'] == 'listItem':
            _content = item.get('content')
            if _content is None:
                new_body.append(EMPTY_DICT)
                continue
            for page in _content:
                if page['type'] == 'paragraph':
                    new_body = type_paragraph(page, new_body, prefix + str(start) + '. ')
                elif page['type'] == 'orderedList':
                    new_body = type_ordered_list(page, new_body, prefix + '   ')
                elif page['type'] == 'bulletList':
                    new_body = type_bullet_list(page, new_body, prefix + '   ')
            start += 1
    return new_body

def change_body_str(body_str) -> str:
    body_dict = json.loads(body_str)
    new_body = []
    for page in body_dict['content']: 
        if page['type'] == 'heading':
            new_body = type_heading(page, new_body)
        elif page['type'] == 'paragraph':
            new_body = type_paragraph(page, new_body)
        elif page['type'] == 'image':
            src = page['attrs']['src']
            new_dict = {'type': 'image', 'src': src}
            new_body.append(new_dict)
        elif page['type'] == 'bulletList':
            new_body = type_bullet_list(page, new_body)
        elif page['type'] == 'orderedList':
            new_body = type_ordered_list(page, new_body)
        else: 
            type = page['type']
            raise Exception(f'unexpected content type: {type}')
    new_body_json = json.dumps(new_body, ensure_ascii=False)
    return new_body_json

def reverse_change_body_str(body_str) -> str:
    body_dicts : list[dict]= json.loads(body_str)
    old_body = []
    for page in body_dicts:
        if page['type'] == 'text':
            paragraph_dict = {'type' : 'paragraph',
                            'content': [{'type': 'text',
                                        'text': page['text']}]}
            old_body.append(paragraph_dict)
        elif page['type'] == 'text_thumb':
            pass
        elif page['type'] == 'image':
            image_dict = {'type' : 'image',
                        'attrs': {'src': page['src']}}
            old_body.append(image_dict)
    old_dict = {'type' : 'doc',
                'content' : old_body}
    old_body_json = json.dumps(old_dict, ensure_ascii=False)
    return old_body_json

def change_design_post_body(apps, schema_editor):
    Post = apps.get_model('blog', 'Post')
    posts = Post.objects.all()
    for post in posts:
        post.body = change_body_str(post.body)
        post.save()

def reverse_change_design_post_body(apps, schema_editor):
    Post = apps.get_model('blog', 'Post')
    posts = Post.objects.all()
    for post in posts:
        post.body = reverse_change_body_str(post.body)
        post.save()

def change_thumb_to_body(apps, schema_editor) -> str:
    Post = apps.get_model('blog', 'Post')
    posts = Post.objects.all()
    for post in posts:
        post_body = json.loads(post.body)
        if post.thumbType == 1:
            src = post.thumbContent
            new_dict = {'type': 'image', 'src': src}
            post_body.insert(0, new_dict)
        elif post.thumbType == 2 or post.thumbType == 3:
            text = post.thumbContent
            new_dict = {'type': 'text_thumb', 'text': text}
            post_body.insert(0, new_dict)
        post_body_str = json.dumps(post_body, ensure_ascii=False)
        post.body = post_body_str
        post.save()

def reverse_change_thumb_to_body(apps, schema_editor):
    Post = apps.get_model('blog', 'Post')
    posts = Post.objects.all()
    for post in posts:
        post_body = json.loads(post.body)
        if post_body[0]['type'] == 'image' and post.thumbType == 1:
            post_body.pop(0)
        elif post_body[0]['type'] == 'text_thumb' and (post.thumbType == 2 or post.thumbType == 3):
            post_body.pop(0)
        post_body_str = json.dumps(post_body, ensure_ascii=False)
        post.body = post_body_str
        post.save()


class Migration(migrations.Migration):

    dependencies = [
        ('blog', '0011_remove_postimage_unique_post_device_index_and_more'),
    ]

    operations = [
        migrations.RunPython(change_design_post_body, reverse_change_design_post_body),
        migrations.RunPython(change_thumb_to_body, reverse_change_thumb_to_body),
    ]
